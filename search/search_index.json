{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"justnotiondb","text":"<p>A minimalistic python package focused solely on extracting databases from Notion</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install justnotiondb\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>First of all, you will need to create a Notion API token. Visit Notion integrations and create a new integration.</p> <p> </p> <p>After that, you will need to set up a connection to the database you want to extract. You can do this by going to your database and opening settings (by clicking the three dots in the top right corner) and then clicking \"Connect to\". Your integration will appear in the list. If your database has relations to other databases, you will need to set up a connection to those databases as well.</p> <p> </p> <p>Now you can use <code>justnotiondb</code> to extract the database. To do that, first you need to create a <code>NotionClient</code> instance and pass the secret you had created. <pre><code>from justnotiondb.notion import NotionClient, DB\n\nclient = NotionClient(secret='secret')\n\n# You can check if the connection is valid\nprint(client.check()) # True or False\n\n# If token provided is not valid, you may see the error message\nprint(client.error)\n</code></pre></p> <p>Now you can create <code>DB</code> class passing the client and database ID. To get database ID visit Notion Database ID to undestand how to do it.</p> <p>To extract the database use <code>get</code> method. It receives a filter and returns a list of dictionaries, where each dictionary represents a page in the database. The keys of each dictionary are the properties of the page, and the values are the values of the properties. Each property was processed according to its type. You can check how it was processed in the <code>processors.py</code> file.</p> <p>Visit Notion Database Query Filter to understand how to build a filter.</p> <pre><code>db_filter = {}\ndb = DB(client=client, id='database_id').get(filter=db_filter)\n\n# It is also possible to extract raw data using `fetch` method\ndb_raw = DB(client=client, id='database_id').fetch(filter=db_filter)\n</code></pre> <p>If you want, you can also write the results to a CSV or JSON file. Others formats are not supported yet. <pre><code>DB.write_csv(content=db, path='file.csv')\n\nDB.write_json(content=db, path='file.json')\n</code></pre></p>"},{"location":"#processors","title":"Processors","text":"<p>Each property has a processor associated with it. These processors are responsible for extracting the property's value appropriately. Below is a list of all processors and how they process the value.</p> Notion property API type Action Date date <code>None</code> if empty. If it has end date it returns formatted as 'start -&gt; end', otherwise just start date Checkbox checkbox It returns <code>True</code> or <code>False</code> Text rich_text <code>None</code> if empty. Otherwise the content of the text Number number <code>None</code> if empty. Otherwise the n umber Select select <code>None</code> if empty. Otherwise the name of the selected option Multi-select multi_select <code>None</code> if empty. Otherwise names concatenated with <code>||</code> Status status <code>None</code> if empty. Otherwise the name of the status Person people <code>None</code> if empty. Otherwise names concatenated with <code>||</code> Files &amp; media files <code>None</code> if empty. Otherwise names concatenated with <code>||</code> URL url <code>None</code> if empty. Otherwise the url Email email <code>None</code> if empty. Otherwise emails concatenated with <code>||</code> Phone phone_number <code>None</code> if empty. Otherwise phone number Formula formula <code>None</code> if empty. Otherwise formula value Relation relation <code>None</code> if empty. Otherwise ids of related pages concatenated with <code>||</code> Rollup rollup <code>None</code> if empty. Calculated number if any calculation is specified. Otherwise values \u200b\u200bconcatenated with <code>||</code> Button button Always <code>None</code> Created time created_time <code>None</code> if empty. Otherwise the date Created by created_by <code>None</code> if empty. Otherwise the person's name Last edited time last_edited_time <code>None</code> if empty. Otherwise the date Last edited by last_edited_by <code>None</code> if empty. Otherwise the person's name ID unique_id ID number"},{"location":"#getting-help","title":"Getting help","text":"<p>If you encounter a clear bug, please file an issue with a minimal reproducible example on GitHub.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2024-11-14","title":"[0.1.0] - 2024-11-14","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li><code>NotionClient</code> class</li> <li><code>DB</code> class</li> <li>processors module containing processors for the following types:<ul> <li>date</li> <li>title</li> <li>checkbox</li> <li>rich_text</li> <li>number</li> <li>select</li> <li>multi_select</li> <li>status</li> <li>people</li> <li>files</li> <li>url</li> <li>email</li> <li>phone_number</li> <li>formula</li> <li>relation</li> <li>rollup</li> <li>button</li> <li>created_time</li> <li>created_by</li> <li>last_edited_time</li> <li>last_edited_by</li> <li>unique_id</li> </ul> </li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Matheus S. Rodrigues</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/notion/","title":"notion","text":""},{"location":"reference/notion/#justnotiondb.notion.DB","title":"<code>DB(client: NotionClient, id: str)</code>","text":"<p>A class representing a Notion database</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>NotionClient</code>)           \u2013            <p>The NotionClient object to use for requests.</p> </li> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>The ID of the database to query.</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>def __init__(self: Self, client: NotionClient, id: str) -&gt; None:\n    \"\"\"\n    Initializes a DB object.\n\n    Parameters\n    ----------\n    client : NotionClient\n        The NotionClient object to use for requests.\n\n    id : str\n        The ID of the database to query.\n    \"\"\"\n    self.client = client\n    self.id = id\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.DB.fetch","title":"<code>fetch(filter: dict) -&gt; dict</code>","text":"<p>Queries the database and fetches the results as a JSON object.</p> <p>Parameters:</p> <ul> <li> <code>filter</code>               (<code>dict</code>)           \u2013            <p>A filter to be applied to the query. You can find more information here: https://developers.notion.com/reference/post-database-query-filter</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>A JSON object containing the query results.</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>def fetch(self: Self, filter: dict) -&gt; dict:\n    \"\"\"\n    Queries the database and fetches the results as a JSON object.\n\n    Parameters\n    ----------\n    filter : dict\n        A filter to be applied to the query.\n        You can find more information here: https://developers.notion.com/reference/post-database-query-filter\n\n    Returns\n    -------\n    dict\n        A JSON object containing the query results.\n    \"\"\"\n    url = f\"{self.client.url}/databases/{self.id}/query\"\n    response = requests.post(\n        url, \n        headers=self.client.headers,\n        data=json.dumps(filter)\n    )\n    response.raise_for_status()\n    return response.json()\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.DB.get","title":"<code>get(filter: dict = {}) -&gt; list[dict]</code>","text":"<p>Queries the database and fetches the results as a list of dictionaries.</p> <p>Parameters:</p> <ul> <li> <code>filter</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>A filter to be applied to the query. Defaults to an empty filter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>A list of dictionaries, each representing a page in the database. Each dictionary contains the page's properties, processed according to their type.</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>def get(self: Self, filter: dict={}) -&gt; list[dict]:\n    \"\"\"\n    Queries the database and fetches the results as a list of dictionaries.\n\n    Parameters\n    ----------\n    filter : dict, optional\n        A filter to be applied to the query. Defaults to an empty filter.\n\n    Returns\n    -------\n    list[dict]\n        A list of dictionaries, each representing a page in the database.\n        Each dictionary contains the page's properties, processed according to their type.\n    \"\"\"\n    db = self.fetch(filter=filter)\n    results = db['results']\n    content = []\n    for result in results:\n        properties = result['properties']\n        content.append({\n            key: processors[value['type']](value)\n            for key, value in properties.items()\n        })\n    return content\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.DB.write_csv","title":"<code>write_csv(content: list[dict], path: str, **kwargs) -&gt; None</code>  <code>classmethod</code>","text":"<p>Writes a list of dictionaries to a CSV file.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>list[dict]</code>)           \u2013            <p>A list of dictionaries, each representing a row in the CSV file</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path to the CSV file.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Additional keyword arguments to be passed to the CSV writer</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>@classmethod\ndef write_csv(cls, content: list[dict], path: str, **kwargs) -&gt; None:\n    \"\"\"\n    Writes a list of dictionaries to a CSV file.\n\n    Parameters\n    ----------\n    content : list[dict]\n        A list of dictionaries, each representing a row in the CSV file\n    path : str\n        The path to the CSV file.\n    **kwargs\n        Additional keyword arguments to be passed to the CSV writer\n    \"\"\"\n    with open(path, 'w', newline='', encoding='utf-8') as f:\n        writer = csv.DictWriter(f, fieldnames=content[0].keys(), **kwargs)\n        writer.writeheader()\n        writer.writerows(content)\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.DB.write_json","title":"<code>write_json(content: list[dict], path: str) -&gt; None</code>  <code>classmethod</code>","text":"<p>Writes a list of dictionaries to a JSON file.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>list[dict]</code>)           \u2013            <p>A list of dictionaries, each representing a row in the JSON file</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path to the JSON file</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>@classmethod\ndef write_json(cls, content: list[dict], path: str) -&gt; None:\n    \"\"\"\n    Writes a list of dictionaries to a JSON file.\n\n    Parameters\n    ----------\n    content : list[dict]\n        A list of dictionaries, each representing a row in the JSON file\n    path : str\n        The path to the JSON file\n    \"\"\"\n    with open(path, 'w', encoding='utf-8') as f:\n        json.dump(content, f, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.NotionClient","title":"<code>NotionClient(secret: str)</code>","text":"<p>A class representing a Notion API connection</p> <p>an exception if the connection is invalid.</p> <p>Parameters:</p> <ul> <li> <code>secret</code>               (<code>str</code>)           \u2013            <p>The secret for the Notion API.</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>def __init__(self: Self, secret: str) -&gt; None:\n    \"\"\"\n    Initializes a NotionAPI object with a secret, and sets up the\n    headers for all requests. Also checks the API connection and raises\n    an exception if the connection is invalid.\n\n    Parameters\n    ----------\n    secret : str\n        The secret for the Notion API.\n    \"\"\"\n    self.__headers = {\n        'Authorization': f'Bearer {secret}',\n        'Notion-Version': '2022-06-28',\n        'Content-Type': \"application/json\"\n    }\n    self.__error: None | str = None\n</code></pre>"},{"location":"reference/notion/#justnotiondb.notion.NotionClient.error","title":"<code>error: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>The error message of the last failed request if any.</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The error message or None if the last request was successful.</p> </li> </ul>"},{"location":"reference/notion/#justnotiondb.notion.NotionClient.check","title":"<code>check() -&gt; bool</code>","text":"<p>Checks the connection to the Notion API by attempting to retrieve user information.</p> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>If the request is successful, returns True.  If the request fails, returns False.</p> </li> </ul> Source code in <code>justnotiondb/notion.py</code> <pre><code>def check(self: Self) -&gt; bool:\n    \"\"\"\n    Checks the connection to the Notion API by attempting to retrieve user information.\n\n    Returns\n    -------\n    bool\n        If the request is successful, returns True. \n        If the request fails, returns False.\n    \"\"\"\n    try:\n        response = requests.get(\n            url=f'{self.url}/users',\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return True\n    except Exception as e:\n        self.error = str(e)\n        return False\n</code></pre>"},{"location":"reference/processors/","title":"processors","text":""},{"location":"reference/processors/#justnotiondb.processors.process_button","title":"<code>process_button(property: dict) -&gt; None</code>","text":"<p>Processes a button property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'button' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            <p>The button property has no value to process, so this function simply returns None.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_button(property: dict) -&gt; None:\n    \"\"\"\n    Processes a button property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'button' field with a dictionary value.\n\n    Returns\n    -------\n    None\n        The button property has no value to process, so this function simply returns None.\n    \"\"\"\n    return None\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_checkbox","title":"<code>process_checkbox(property: dict) -&gt; bool</code>","text":"<p>Processes a checkbox property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'checkbox' field with a boolean value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>The boolean value of the checkbox field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_checkbox(property: dict) -&gt; bool:\n    \"\"\"\n    Processes a checkbox property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'checkbox' field with a boolean value.\n\n    Returns\n    -------\n    bool\n        The boolean value of the checkbox field.\n    \"\"\"\n    return property['checkbox']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_created_by","title":"<code>process_created_by(property: dict) -&gt; str | None</code>","text":"<p>Processes a created by property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'created_by' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the created by field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_created_by(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a created by property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'created_by' field with a dictionary value.\n\n    Returns\n    -------\n    str\n        The string value of the created by field.\n    \"\"\"\n    return property['created_by']['id']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_created_time","title":"<code>process_created_time(property: dict) -&gt; str | None</code>","text":"<p>Processes a created time property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'created_time' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the created time field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_created_time(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a created time property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'created_time' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the created time field.\n    \"\"\"\n    return property['created_time']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_date","title":"<code>process_date(property: dict) -&gt; str | None</code>","text":"<p>Processes a date property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'date' field with 'start' and optionally 'end' keys.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A formatted string representing the date range if both start and end dates are present, otherwise just the start date.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_date(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a date property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'date' field with\n        'start' and optionally 'end' keys.\n\n    Returns\n    -------\n    str\n        A formatted string representing the date range if both\n        start and end dates are present, otherwise just the start date.\n    \"\"\"\n    value: dict = property['date']\n    if value is None:\n        return None\n    start = value['start']\n    end = value['end']\n    result = f'{start} -&gt; {end}' if end else start\n    return result\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_email","title":"<code>process_email(property: dict) -&gt; str | None</code>","text":"<p>Processes an email property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'email' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the email field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_email(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes an email property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'email' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the email field.\n    \"\"\"\n    return property['email']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_files","title":"<code>process_files(property: dict) -&gt; str | None</code>","text":"<p>Processes a files property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'files' field, which is a list of file objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of URLs of the files.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_files(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a files property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'files' field, which is a list of file objects.\n\n    Returns\n    -------\n    list[str]\n        A list of URLs of the files.\n    \"\"\"\n    return process_list(property, 'files', 'file')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_formula","title":"<code>process_formula(property: dict) -&gt; str | None</code>","text":"<p>Processes a formula property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'formula' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the formula field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_formula(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a formula property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'formula' field with a dictionary value.\n\n    Returns\n    -------\n    str\n        The string value of the formula field.\n    \"\"\"\n    value: dict = property['formula']\n    result = value[value['type']]\n    return result\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_last_edited_by","title":"<code>process_last_edited_by(property: dict) -&gt; str | None</code>","text":"<p>Processes a last edited by property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'last_edited_by' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the last edited by field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_last_edited_by(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a last edited by property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'last_edited_by' field with a dictionary value.\n\n    Returns\n    -------\n    str\n        The string value of the last edited by field.\n    \"\"\"\n    return property['last_edited_by']['name']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_last_edited_time","title":"<code>process_last_edited_time(property: dict) -&gt; str | None</code>","text":"<p>Processes a last edited time property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'last_edited_time' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the last edited time field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_last_edited_time(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a last edited time property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'last_edited_time' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the last edited time field.\n    \"\"\"\n    return property['last_edited_time']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_multi_select","title":"<code>process_multi_select(property: dict) -&gt; str | None</code>","text":"<p>Processes a multi-select property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'multi_select' field, which is a list of option objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of names of the selected options.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_multi_select(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a multi-select property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'multi_select' field, which is a list of option objects.\n\n    Returns\n    -------\n    list[str]\n        A list of names of the selected options.\n    \"\"\"\n    return process_list(property, 'multi_select', 'name')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_number","title":"<code>process_number(property: dict) -&gt; int | None</code>","text":"<p>Processes a number property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'number' field with an integer value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The integer value of the number field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_number(property: dict) -&gt; int | None:\n    \"\"\"\n    Processes a number property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'number' field with an integer value.\n\n    Returns\n    -------\n    int\n        The integer value of the number field.\n    \"\"\"\n    return property['number']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_people","title":"<code>process_people(property: dict) -&gt; str | None</code>","text":"<p>Processes a people property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'people' field, which is a list of people objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of names of the people.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_people(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a people property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'people' field, which is a list of people objects.\n\n    Returns\n    -------\n    list[str]\n        A list of names of the people.\n    \"\"\"\n    return process_list(property, 'people', 'name')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_phone_number","title":"<code>process_phone_number(property: dict) -&gt; str | None</code>","text":"<p>Processes a phone number property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'phone_number' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the phone number field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_phone_number(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a phone number property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'phone_number' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the phone number field.\n    \"\"\"\n    return property['phone_number']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_relation","title":"<code>process_relation(property: dict) -&gt; str | None</code>","text":"<p>Processes a relation property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'relation' field, which is a list of relation objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of IDs of the related pages.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_relation(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a relation property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'relation' field, which is a list of relation objects.\n\n    Returns\n    -------\n    list[str]\n        A list of IDs of the related pages.\n    \"\"\"\n    return process_list(property, 'relation', 'id')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_rich_text","title":"<code>process_rich_text(property: dict) -&gt; str | None</code>","text":"<p>Processes a rich text property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'rich_text' field, which is a list of text objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of plain text strings from the rich text field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_rich_text(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a rich text property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'rich_text' field, which is a list of text objects.\n\n    Returns\n    -------\n    list[str]\n        A list of plain text strings from the rich text field.\n    \"\"\"\n    return process_list(property, 'rich_text', 'plain_text')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_select","title":"<code>process_select(property: dict) -&gt; str | None</code>","text":"<p>Processes a select property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'select' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The name of the selected option.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_select(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a select property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'select' field with a dictionary value.\n\n    Returns\n    -------\n    str\n        The name of the selected option.\n    \"\"\"\n    value: dict = property['select']\n    if value is None:\n        return None\n    return value['name']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_status","title":"<code>process_status(property: dict) -&gt; str | None</code>","text":"<p>Processes a status property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'status' field with a dictionary value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The name of the status.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_status(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a status property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'status' field with a dictionary value.\n\n    Returns\n    -------\n    str\n        The name of the status.\n    \"\"\"\n    value: dict = property['status']\n    if value is None:\n        return None\n    return value['name']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_title","title":"<code>process_title(property: dict) -&gt; str | None</code>","text":"<p>Processes a title property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'title' field, which is a list of text objects.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list of plain text strings from the title field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_title(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a title property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'title' field, which is a list of text objects.\n\n    Returns\n    -------\n    list[str]\n        A list of plain text strings from the title field.\n    \"\"\"\n    return process_list(property, 'title', 'plain_text')\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_unique_id","title":"<code>process_unique_id(property: dict) -&gt; str | None</code>","text":"<p>Processes a unique id property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'unique_id' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the unique id field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_unique_id(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a unique id property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'unique_id' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the unique id field.\n    \"\"\"\n    return property['unique_id']['number']\n</code></pre>"},{"location":"reference/processors/#justnotiondb.processors.process_url","title":"<code>process_url(property: dict) -&gt; str | None</code>","text":"<p>Processes a url property from a Notion database entry.</p> <p>Parameters:</p> <ul> <li> <code>property</code>               (<code>dict</code>)           \u2013            <p>A dictionary containing a 'url' field with a string value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string value of the url field.</p> </li> </ul> Source code in <code>justnotiondb/processors.py</code> <pre><code>def process_url(property: dict) -&gt; str | None:\n    \"\"\"\n    Processes a url property from a Notion database entry.\n\n    Parameters\n    ----------\n    property : dict\n        A dictionary containing a 'url' field with a string value.\n\n    Returns\n    -------\n    str\n        The string value of the url field.\n    \"\"\"\n    return property['url']\n</code></pre>"}]}